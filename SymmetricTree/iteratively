# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        stackleft = deque()
        stackright = deque()
        
        result = []
        if root==None:
            return True
        if root.left!=None and root.right!=None:
            stackleft.append(root.left)
            stackright.append(root.right)
        elif root.left==None and root.right==None:
            return True
        else:
            return False
        while(stackleft):
            node1 = stackleft.pop()
            node2 = stackright.pop()
            if node1.val==node2.val:
                result.append(1)
            else:
                result.append(0)
            if node1.left!=None and node1.right!=None and node2.left!=None and node2.right!=None:
                stackleft.append(node1.right)
                stackleft.append(node1.left)
                stackright.append(node2.left)
                stackright.append(node2.right)

            elif node1.left!=None and node2.right!=None and node1.right==None and node2.left==None:
                stackleft.append(node1.left)
                stackright.append(node2.right)
            elif node1.left==None and node2.right==None and node1.right!=None and node2.left!=None:
                stackleft.append(node1.right)
                stackright.append(node2.left)
            elif node1.left==None and node1.right==None and node2.left==None and node2.right==None:
                pass
                
            else:
                result.append(0)
        if 0 in result:
            return False
        else:
            return True
        
        
        
